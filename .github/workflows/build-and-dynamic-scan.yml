name: "Build and static binary scan"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SCHEME: "rmisc2024-bcs-ios"
  # some Schemes have spaces so let's use this variable for file naming
  FILENAME: "rmisc2024-bcs-ios"
  GROUP_ID: "ffa3208c-e1af-4dd6-9a92-765eb4f38c1b"

on:
  # manual trigger but change to any supported event
  # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
  workflow_dispatch:
  # new pull requests
  pull_request:
    branches:
        - main
  # new releases or pre-releases
  release:
    types: [published]

jobs:
  build_with_signing:
    runs-on: macos-14
    steps:
      # current version in macsos-latest is 15.0.1 but we need 15.4
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v4

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

      - name: build archive
        run: |
          xcodebuild -scheme $SCHEME \
          -archivePath $RUNNER_TEMP/$FILENAME.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive          

      - name: export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/$FILENAME.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ${{ runner.temp }}/build/${{ env.FILENAME }}.ipa
          # you can also archive the entire directory 
          # path: ${{ runner.temp }}/build
          retention-days: 3

  scan:
    runs-on: ubuntu-latest
    outputs:
      report_id: ${{ steps.upload.outputs.report_id }}
    # The stage that builds the application.
    needs: build_with_signing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # NOTE: ripgrep is required for line-of-code identification.
      - name: Install ripgrep
        run: sudo apt-get install -y ripgrep

      # Replace with whatever pulls the application file before we upload.
      - name: Download application
        uses: actions/download-artifact@v4
        with:
          # Generated in the "build" stage.
          name: app

      - id: upload
        name: NowSecure upload app
        uses: nowsecure/nowsecure-action/upload-app@v4
        with:
          platform_token: ${{ secrets.NS_TOKEN }}
          # TODO: Replace application path.
          app_file: ${{ env.FILENAME }}.ipa
          # TODO: Replace the Group ID.
          group_id: ${{ env.GROUP_ID }}
          analysis_type: "dynamic"

  process:
    if: ${{ needs.scan.outputs.report_id }}
    runs-on: ubuntu-latest

    # permission needed for upload-sarif@v2
    permissions:
      # required for all workflows
      security-events: write

      # only required for workflows in private repositories
      actions: read
      contents: read

    # The above stage we introduced.
    needs: scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: NowSecure download report
        uses: nowsecure/nowsecure-action/convert-sarif@v4
        timeout-minutes: 60
        with:
          report_id: ${{ needs.scan.outputs.report_id }}
          platform_token: ${{ secrets.NS_TOKEN }}
          # TODO: Replace the Group ID.
          group_id: ${{ env.GROUP_ID }}

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: NowSecure.sarif